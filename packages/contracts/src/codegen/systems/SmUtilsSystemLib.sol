// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { SmUtilsSystem } from "../../systems/SmUtilsSystem.sol";
import { InventoryItemParams } from "@eveworld/world-v2/src/namespaces/evefrontier/systems/inventory/types.sol";
import { BucketMetadataData } from "../tables/BucketMetadata.sol";
import { BucketMetadataWithId } from "../../systems/StorageSystem/utils.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type SmUtilsSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "sm_v0_2_0", name: "SmUtilsSystem" }))
SmUtilsSystemType constant smUtilsSystem = SmUtilsSystemType.wrap(
  0x7379736d5f76305f325f300000000000536d5574696c7353797374656d000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title SmUtilsSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library SmUtilsSystemLib {
  error SmUtilsSystemLib_CallingFromRootSystem();

  function deriveBucketId(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    string memory bucketName
  ) internal view returns (bytes32) {
    return CallWrapper(self.toResourceId(), address(0)).deriveBucketId(smartObjectId, bucketName);
  }

  function getPrimaryInventoryOwnerItems(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (InventoryItemParams[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getPrimaryInventoryOwnerItems(smartObjectId, owner);
  }

  function getEphemeralInventoryItems(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (InventoryItemParams[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getEphemeralInventoryItems(smartObjectId, owner);
  }

  function getBucketInventoryItems(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (InventoryItemParams[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBucketInventoryItems(smartObjectId, bucketId);
  }

  function getBucketsMetadata(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds
  ) internal view returns (BucketMetadataData[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBucketsMetadata(smartObjectId, bucketIds);
  }

  function getBatchCanDeposit(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) internal returns (bool[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBatchCanDeposit(smartObjectId, bucketIds, sender);
  }

  function getBatchCanWithdraw(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) internal returns (bool[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBatchCanWithdraw(smartObjectId, bucketIds, sender);
  }

  function getOwnerBalance(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    uint256 itemId
  ) internal view returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0)).getOwnerBalance(smartObjectId, itemId);
  }

  function getBucketsByOwnerAtSSU(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (bytes32[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBucketsByOwnerAtSSU(smartObjectId, owner);
  }

  function getBucketMetadata(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (BucketMetadataWithId memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBucketMetadata(smartObjectId, bucketId);
  }

  function getBucketMetadataChain(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (BucketMetadataWithId[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBucketMetadataChain(smartObjectId, bucketId);
  }

  function getBucketMetadataChainByName(
    SmUtilsSystemType self,
    uint256 smartObjectId,
    string memory bucketName
  ) internal view returns (BucketMetadataWithId[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getBucketMetadataChainByName(smartObjectId, bucketName);
  }

  function getItemTypeIds(SmUtilsSystemType self, uint256[] calldata itemIds) internal view returns (uint256[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getItemTypeIds(itemIds);
  }

  function deriveBucketId(
    CallWrapper memory self,
    uint256 smartObjectId,
    string memory bucketName
  ) internal view returns (bytes32) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _deriveBucketId_uint256_string.deriveBucketId,
      (smartObjectId, bucketName)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bytes32));
  }

  function getPrimaryInventoryOwnerItems(
    CallWrapper memory self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (InventoryItemParams[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getPrimaryInventoryOwnerItems_uint256_address.getPrimaryInventoryOwnerItems,
      (smartObjectId, owner)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (InventoryItemParams[]));
  }

  function getEphemeralInventoryItems(
    CallWrapper memory self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (InventoryItemParams[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getEphemeralInventoryItems_uint256_address.getEphemeralInventoryItems,
      (smartObjectId, owner)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (InventoryItemParams[]));
  }

  function getBucketInventoryItems(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (InventoryItemParams[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBucketInventoryItems_uint256_bytes32.getBucketInventoryItems,
      (smartObjectId, bucketId)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (InventoryItemParams[]));
  }

  function getBucketsMetadata(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds
  ) internal view returns (BucketMetadataData[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBucketsMetadata_uint256_bytes32Array.getBucketsMetadata,
      (smartObjectId, bucketIds)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (BucketMetadataData[]));
  }

  function getBatchCanDeposit(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) internal returns (bool[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBatchCanDeposit_uint256_bytes32Array_address.getBatchCanDeposit,
      (smartObjectId, bucketIds, sender)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool[]));
  }

  function getBatchCanWithdraw(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) internal returns (bool[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBatchCanWithdraw_uint256_bytes32Array_address.getBatchCanWithdraw,
      (smartObjectId, bucketIds, sender)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool[]));
  }

  function getOwnerBalance(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 itemId
  ) internal view returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getOwnerBalance_uint256_uint256.getOwnerBalance, (smartObjectId, itemId));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function getBucketsByOwnerAtSSU(
    CallWrapper memory self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (bytes32[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBucketsByOwnerAtSSU_uint256_address.getBucketsByOwnerAtSSU,
      (smartObjectId, owner)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bytes32[]));
  }

  function getBucketMetadata(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (BucketMetadataWithId memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBucketMetadata_uint256_bytes32.getBucketMetadata,
      (smartObjectId, bucketId)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (BucketMetadataWithId));
  }

  function getBucketMetadataChain(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (BucketMetadataWithId[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBucketMetadataChain_uint256_bytes32.getBucketMetadataChain,
      (smartObjectId, bucketId)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (BucketMetadataWithId[]));
  }

  function getBucketMetadataChainByName(
    CallWrapper memory self,
    uint256 smartObjectId,
    string memory bucketName
  ) internal view returns (BucketMetadataWithId[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getBucketMetadataChainByName_uint256_string.getBucketMetadataChainByName,
      (smartObjectId, bucketName)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (BucketMetadataWithId[]));
  }

  function getItemTypeIds(
    CallWrapper memory self,
    uint256[] calldata itemIds
  ) internal view returns (uint256[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getItemTypeIds_uint256Array.getItemTypeIds, (itemIds));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256[]));
  }

  function deriveBucketId(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    string memory bucketName
  ) internal view returns (bytes32) {
    bytes memory systemCall = abi.encodeCall(
      _deriveBucketId_uint256_string.deriveBucketId,
      (smartObjectId, bucketName)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32));
  }

  function getPrimaryInventoryOwnerItems(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (InventoryItemParams[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getPrimaryInventoryOwnerItems_uint256_address.getPrimaryInventoryOwnerItems,
      (smartObjectId, owner)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (InventoryItemParams[]));
  }

  function getEphemeralInventoryItems(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (InventoryItemParams[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getEphemeralInventoryItems_uint256_address.getEphemeralInventoryItems,
      (smartObjectId, owner)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (InventoryItemParams[]));
  }

  function getBucketInventoryItems(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (InventoryItemParams[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBucketInventoryItems_uint256_bytes32.getBucketInventoryItems,
      (smartObjectId, bucketId)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (InventoryItemParams[]));
  }

  function getBucketsMetadata(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds
  ) internal view returns (BucketMetadataData[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBucketsMetadata_uint256_bytes32Array.getBucketsMetadata,
      (smartObjectId, bucketIds)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (BucketMetadataData[]));
  }

  function getBatchCanDeposit(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) internal returns (bool[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBatchCanDeposit_uint256_bytes32Array_address.getBatchCanDeposit,
      (smartObjectId, bucketIds, sender)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bool[]));
  }

  function getBatchCanWithdraw(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) internal returns (bool[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBatchCanWithdraw_uint256_bytes32Array_address.getBatchCanWithdraw,
      (smartObjectId, bucketIds, sender)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bool[]));
  }

  function getOwnerBalance(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 itemId
  ) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(_getOwnerBalance_uint256_uint256.getOwnerBalance, (smartObjectId, itemId));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function getBucketsByOwnerAtSSU(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address owner
  ) internal view returns (bytes32[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBucketsByOwnerAtSSU_uint256_address.getBucketsByOwnerAtSSU,
      (smartObjectId, owner)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32[]));
  }

  function getBucketMetadata(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (BucketMetadataWithId memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBucketMetadata_uint256_bytes32.getBucketMetadata,
      (smartObjectId, bucketId)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (BucketMetadataWithId));
  }

  function getBucketMetadataChain(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (BucketMetadataWithId[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBucketMetadataChain_uint256_bytes32.getBucketMetadataChain,
      (smartObjectId, bucketId)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (BucketMetadataWithId[]));
  }

  function getBucketMetadataChainByName(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    string memory bucketName
  ) internal view returns (BucketMetadataWithId[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _getBucketMetadataChainByName_uint256_string.getBucketMetadataChainByName,
      (smartObjectId, bucketName)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (BucketMetadataWithId[]));
  }

  function getItemTypeIds(
    RootCallWrapper memory self,
    uint256[] calldata itemIds
  ) internal view returns (uint256[] memory) {
    bytes memory systemCall = abi.encodeCall(_getItemTypeIds_uint256Array.getItemTypeIds, (itemIds));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256[]));
  }

  function callFrom(SmUtilsSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(SmUtilsSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(SmUtilsSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(SmUtilsSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(SmUtilsSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (SmUtilsSystemType) {
    return SmUtilsSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(SmUtilsSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _deriveBucketId_uint256_string {
  function deriveBucketId(uint256 smartObjectId, string memory bucketName) external;
}

interface _getPrimaryInventoryOwnerItems_uint256_address {
  function getPrimaryInventoryOwnerItems(uint256 smartObjectId, address owner) external;
}

interface _getEphemeralInventoryItems_uint256_address {
  function getEphemeralInventoryItems(uint256 smartObjectId, address owner) external;
}

interface _getBucketInventoryItems_uint256_bytes32 {
  function getBucketInventoryItems(uint256 smartObjectId, bytes32 bucketId) external;
}

interface _getBucketsMetadata_uint256_bytes32Array {
  function getBucketsMetadata(uint256 smartObjectId, bytes32[] memory bucketIds) external;
}

interface _getBatchCanDeposit_uint256_bytes32Array_address {
  function getBatchCanDeposit(uint256 smartObjectId, bytes32[] memory bucketIds, address sender) external;
}

interface _getBatchCanWithdraw_uint256_bytes32Array_address {
  function getBatchCanWithdraw(uint256 smartObjectId, bytes32[] memory bucketIds, address sender) external;
}

interface _getOwnerBalance_uint256_uint256 {
  function getOwnerBalance(uint256 smartObjectId, uint256 itemId) external;
}

interface _getBucketsByOwnerAtSSU_uint256_address {
  function getBucketsByOwnerAtSSU(uint256 smartObjectId, address owner) external;
}

interface _getBucketMetadata_uint256_bytes32 {
  function getBucketMetadata(uint256 smartObjectId, bytes32 bucketId) external;
}

interface _getBucketMetadataChain_uint256_bytes32 {
  function getBucketMetadataChain(uint256 smartObjectId, bytes32 bucketId) external;
}

interface _getBucketMetadataChainByName_uint256_string {
  function getBucketMetadataChainByName(uint256 smartObjectId, string memory bucketName) external;
}

interface _getItemTypeIds_uint256Array {
  function getItemTypeIds(uint256[] calldata itemIds) external;
}

using SmUtilsSystemLib for SmUtilsSystemType global;
using SmUtilsSystemLib for CallWrapper global;
using SmUtilsSystemLib for RootCallWrapper global;
