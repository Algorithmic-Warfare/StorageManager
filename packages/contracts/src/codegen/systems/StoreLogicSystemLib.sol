// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { StoreLogicSystem } from "../../systems/StorageSystem/StoreLogicSystem.sol";
import { InventoryItemParams } from "@eveworld/world-v2/src/namespaces/evefrontier/systems/inventory/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type StoreLogicSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "sm_v0_2_0", name: "StoreLogicSystem" }))
StoreLogicSystemType constant storeLogicSystem = StoreLogicSystemType.wrap(
  0x7379736d5f76305f325f30000000000053746f72654c6f67696353797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title StoreLogicSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library StoreLogicSystemLib {
  error StoreLogicSystemLib_CallingFromRootSystem();

  function _processDeposit(
    StoreLogicSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    InventoryItemParams memory item
  ) internal {
    return CallWrapper(self.toResourceId(), address(0))._processDeposit(smartObjectId, bucketId, item);
  }

  function _processWithdraw(
    StoreLogicSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    InventoryItemParams memory item
  ) internal {
    return CallWrapper(self.toResourceId(), address(0))._processWithdraw(smartObjectId, bucketId, item);
  }

  function _processAggBucketsBalance(
    StoreLogicSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    bool isWithdrawal,
    InventoryItemParams memory item
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0))._processAggBucketsBalance(
        smartObjectId,
        bucketId,
        isWithdrawal,
        item
      );
  }

  function _processDeposit(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    InventoryItemParams memory item
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreLogicSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      __processDeposit_uint256_bytes32_InventoryItemParams._processDeposit,
      (smartObjectId, bucketId, item)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function _processWithdraw(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    InventoryItemParams memory item
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreLogicSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      __processWithdraw_uint256_bytes32_InventoryItemParams._processWithdraw,
      (smartObjectId, bucketId, item)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function _processAggBucketsBalance(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    bool isWithdrawal,
    InventoryItemParams memory item
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreLogicSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      __processAggBucketsBalance_uint256_bytes32_bool_InventoryItemParams._processAggBucketsBalance,
      (smartObjectId, bucketId, isWithdrawal, item)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function _processDeposit(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    InventoryItemParams memory item
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      __processDeposit_uint256_bytes32_InventoryItemParams._processDeposit,
      (smartObjectId, bucketId, item)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function _processWithdraw(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    InventoryItemParams memory item
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      __processWithdraw_uint256_bytes32_InventoryItemParams._processWithdraw,
      (smartObjectId, bucketId, item)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function _processAggBucketsBalance(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    bool isWithdrawal,
    InventoryItemParams memory item
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      __processAggBucketsBalance_uint256_bytes32_bool_InventoryItemParams._processAggBucketsBalance,
      (smartObjectId, bucketId, isWithdrawal, item)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(StoreLogicSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(StoreLogicSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(StoreLogicSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(StoreLogicSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(StoreLogicSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (StoreLogicSystemType) {
    return StoreLogicSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(StoreLogicSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface __processDeposit_uint256_bytes32_InventoryItemParams {
  function _processDeposit(uint256 smartObjectId, bytes32 bucketId, InventoryItemParams memory item) external;
}

interface __processWithdraw_uint256_bytes32_InventoryItemParams {
  function _processWithdraw(uint256 smartObjectId, bytes32 bucketId, InventoryItemParams memory item) external;
}

interface __processAggBucketsBalance_uint256_bytes32_bool_InventoryItemParams {
  function _processAggBucketsBalance(
    uint256 smartObjectId,
    bytes32 bucketId,
    bool isWithdrawal,
    InventoryItemParams memory item
  ) external;
}

using StoreLogicSystemLib for StoreLogicSystemType global;
using StoreLogicSystemLib for CallWrapper global;
using StoreLogicSystemLib for RootCallWrapper global;
