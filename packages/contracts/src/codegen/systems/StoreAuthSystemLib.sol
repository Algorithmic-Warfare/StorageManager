// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { StoreAuthSystem } from "../../systems/StorageSystem/StoreAuthSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type StoreAuthSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "sm_v0_2_0", name: "StoreAuthSystem" }))
StoreAuthSystemType constant storeAuthSystem = StoreAuthSystemType.wrap(
  0x7379736d5f76305f325f30000000000053746f72654175746853797374656d00
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title StoreAuthSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library StoreAuthSystemLib {
  error StoreAuthSystemLib_CallingFromRootSystem();

  function setAccessSystemId(
    StoreAuthSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    ResourceId systemId
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).setAccessSystemId(smartObjectId, bucketId, systemId);
  }

  function getCharacterTribeByAddress(StoreAuthSystemType self, address playerAddress) internal view returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0)).getCharacterTribeByAddress(playerAddress);
  }

  function fetchAuthorizationSystemId(
    StoreAuthSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (ResourceId) {
    return CallWrapper(self.toResourceId(), address(0)).fetchAuthorizationSystemId(smartObjectId, bucketId);
  }

  function canDeposit(
    StoreAuthSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    return CallWrapper(self.toResourceId(), address(0)).canDeposit(smartObjectId, bucketId, sender);
  }

  function canWithdraw(
    StoreAuthSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    return CallWrapper(self.toResourceId(), address(0)).canWithdraw(smartObjectId, bucketId, sender);
  }

  function canTransferBucket(
    StoreAuthSystemType self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    return CallWrapper(self.toResourceId(), address(0)).canTransferBucket(smartObjectId, bucketId, sender);
  }

  function setAccessSystemId(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    ResourceId systemId
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreAuthSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setAccessSystemId_uint256_bytes32_ResourceId.setAccessSystemId,
      (smartObjectId, bucketId, systemId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getCharacterTribeByAddress(CallWrapper memory self, address playerAddress) internal view returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreAuthSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getCharacterTribeByAddress_address.getCharacterTribeByAddress,
      (playerAddress)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function fetchAuthorizationSystemId(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (ResourceId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreAuthSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _fetchAuthorizationSystemId_uint256_bytes32.fetchAuthorizationSystemId,
      (smartObjectId, bucketId)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (ResourceId));
  }

  function canDeposit(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreAuthSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _canDeposit_uint256_bytes32_address.canDeposit,
      (smartObjectId, bucketId, sender)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool));
  }

  function canWithdraw(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreAuthSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _canWithdraw_uint256_bytes32_address.canWithdraw,
      (smartObjectId, bucketId, sender)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool));
  }

  function canTransferBucket(
    CallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreAuthSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _canTransferBucket_uint256_bytes32_address.canTransferBucket,
      (smartObjectId, bucketId, sender)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool));
  }

  function setAccessSystemId(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    ResourceId systemId
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setAccessSystemId_uint256_bytes32_ResourceId.setAccessSystemId,
      (smartObjectId, bucketId, systemId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getCharacterTribeByAddress(
    RootCallWrapper memory self,
    address playerAddress
  ) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(
      _getCharacterTribeByAddress_address.getCharacterTribeByAddress,
      (playerAddress)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function fetchAuthorizationSystemId(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId
  ) internal view returns (ResourceId) {
    bytes memory systemCall = abi.encodeCall(
      _fetchAuthorizationSystemId_uint256_bytes32.fetchAuthorizationSystemId,
      (smartObjectId, bucketId)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (ResourceId));
  }

  function canDeposit(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    bytes memory systemCall = abi.encodeCall(
      _canDeposit_uint256_bytes32_address.canDeposit,
      (smartObjectId, bucketId, sender)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bool));
  }

  function canWithdraw(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    bytes memory systemCall = abi.encodeCall(
      _canWithdraw_uint256_bytes32_address.canWithdraw,
      (smartObjectId, bucketId, sender)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bool));
  }

  function canTransferBucket(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    bytes32 bucketId,
    address sender
  ) internal returns (bool) {
    bytes memory systemCall = abi.encodeCall(
      _canTransferBucket_uint256_bytes32_address.canTransferBucket,
      (smartObjectId, bucketId, sender)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bool));
  }

  function callFrom(StoreAuthSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(StoreAuthSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(StoreAuthSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(StoreAuthSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(StoreAuthSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (StoreAuthSystemType) {
    return StoreAuthSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(StoreAuthSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setAccessSystemId_uint256_bytes32_ResourceId {
  function setAccessSystemId(uint256 smartObjectId, bytes32 bucketId, ResourceId systemId) external;
}

interface _getCharacterTribeByAddress_address {
  function getCharacterTribeByAddress(address playerAddress) external;
}

interface _fetchAuthorizationSystemId_uint256_bytes32 {
  function fetchAuthorizationSystemId(uint256 smartObjectId, bytes32 bucketId) external;
}

interface _canDeposit_uint256_bytes32_address {
  function canDeposit(uint256 smartObjectId, bytes32 bucketId, address sender) external;
}

interface _canWithdraw_uint256_bytes32_address {
  function canWithdraw(uint256 smartObjectId, bytes32 bucketId, address sender) external;
}

interface _canTransferBucket_uint256_bytes32_address {
  function canTransferBucket(uint256 smartObjectId, bytes32 bucketId, address sender) external;
}

using StoreAuthSystemLib for StoreAuthSystemType global;
using StoreAuthSystemLib for CallWrapper global;
using StoreAuthSystemLib for RootCallWrapper global;
