// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { StoreProxySystem } from "../../systems/StoreProxySystem/StoreProxySystem.sol";
import { InventoryItemParams } from "@eveworld/world-v2/src/namespaces/evefrontier/systems/inventory/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type StoreProxySystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "sm_v0_2_0", name: "StoreProxySystem" }))
StoreProxySystemType constant storeProxySystem = StoreProxySystemType.wrap(
  0x7379736d5f76305f325f30000000000053746f726550726f787953797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title StoreProxySystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library StoreProxySystemLib {
  error StoreProxySystemLib_CallingFromRootSystem();

  function getStoreProxyAddress(StoreProxySystemType self) internal view returns (address) {
    return CallWrapper(self.toResourceId(), address(0)).getStoreProxyAddress();
  }

  function proxyTransferToEphemeral(
    StoreProxySystemType self,
    uint256 smartObjectId,
    address recipient,
    InventoryItemParams[] memory transferItems
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).proxyTransferToEphemeral(smartObjectId, recipient, transferItems);
  }

  function proxyTransferFromEphemeral(
    StoreProxySystemType self,
    uint256 smartObjectId,
    address sender,
    InventoryItemParams[] memory transferItems
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).proxyTransferFromEphemeral(smartObjectId, sender, transferItems);
  }

  function proxyCrossTransferToEphemeral(
    StoreProxySystemType self,
    uint256 smartObjectId,
    address fromEphemeralOwner,
    address toEphemeralOwner,
    InventoryItemParams[] memory items
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).proxyCrossTransferToEphemeral(
        smartObjectId,
        fromEphemeralOwner,
        toEphemeralOwner,
        items
      );
  }

  function proxyTransferToInventory(
    StoreProxySystemType self,
    uint256 smartObjectId,
    uint256 toObjectId,
    InventoryItemParams[] memory items
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).proxyTransferToInventory(smartObjectId, toObjectId, items);
  }

  function getStoreProxyAddress(CallWrapper memory self) internal view returns (address) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreProxySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getStoreProxyAddress.getStoreProxyAddress, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (address));
  }

  function proxyTransferToEphemeral(
    CallWrapper memory self,
    uint256 smartObjectId,
    address recipient,
    InventoryItemParams[] memory transferItems
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreProxySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _proxyTransferToEphemeral_uint256_address_InventoryItemParamsArray.proxyTransferToEphemeral,
      (smartObjectId, recipient, transferItems)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function proxyTransferFromEphemeral(
    CallWrapper memory self,
    uint256 smartObjectId,
    address sender,
    InventoryItemParams[] memory transferItems
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreProxySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _proxyTransferFromEphemeral_uint256_address_InventoryItemParamsArray.proxyTransferFromEphemeral,
      (smartObjectId, sender, transferItems)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function proxyCrossTransferToEphemeral(
    CallWrapper memory self,
    uint256 smartObjectId,
    address fromEphemeralOwner,
    address toEphemeralOwner,
    InventoryItemParams[] memory items
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreProxySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _proxyCrossTransferToEphemeral_uint256_address_address_InventoryItemParamsArray.proxyCrossTransferToEphemeral,
      (smartObjectId, fromEphemeralOwner, toEphemeralOwner, items)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function proxyTransferToInventory(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 toObjectId,
    InventoryItemParams[] memory items
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreProxySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _proxyTransferToInventory_uint256_uint256_InventoryItemParamsArray.proxyTransferToInventory,
      (smartObjectId, toObjectId, items)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getStoreProxyAddress(RootCallWrapper memory self) internal view returns (address) {
    bytes memory systemCall = abi.encodeCall(_getStoreProxyAddress.getStoreProxyAddress, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (address));
  }

  function proxyTransferToEphemeral(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address recipient,
    InventoryItemParams[] memory transferItems
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _proxyTransferToEphemeral_uint256_address_InventoryItemParamsArray.proxyTransferToEphemeral,
      (smartObjectId, recipient, transferItems)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function proxyTransferFromEphemeral(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address sender,
    InventoryItemParams[] memory transferItems
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _proxyTransferFromEphemeral_uint256_address_InventoryItemParamsArray.proxyTransferFromEphemeral,
      (smartObjectId, sender, transferItems)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function proxyCrossTransferToEphemeral(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address fromEphemeralOwner,
    address toEphemeralOwner,
    InventoryItemParams[] memory items
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _proxyCrossTransferToEphemeral_uint256_address_address_InventoryItemParamsArray.proxyCrossTransferToEphemeral,
      (smartObjectId, fromEphemeralOwner, toEphemeralOwner, items)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function proxyTransferToInventory(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 toObjectId,
    InventoryItemParams[] memory items
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _proxyTransferToInventory_uint256_uint256_InventoryItemParamsArray.proxyTransferToInventory,
      (smartObjectId, toObjectId, items)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(StoreProxySystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(StoreProxySystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(StoreProxySystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(StoreProxySystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(StoreProxySystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (StoreProxySystemType) {
    return StoreProxySystemType.wrap(resourceId.unwrap());
  }

  function getAddress(StoreProxySystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _getStoreProxyAddress {
  function getStoreProxyAddress() external;
}

interface _proxyTransferToEphemeral_uint256_address_InventoryItemParamsArray {
  function proxyTransferToEphemeral(
    uint256 smartObjectId,
    address recipient,
    InventoryItemParams[] memory transferItems
  ) external;
}

interface _proxyTransferFromEphemeral_uint256_address_InventoryItemParamsArray {
  function proxyTransferFromEphemeral(
    uint256 smartObjectId,
    address sender,
    InventoryItemParams[] memory transferItems
  ) external;
}

interface _proxyCrossTransferToEphemeral_uint256_address_address_InventoryItemParamsArray {
  function proxyCrossTransferToEphemeral(
    uint256 smartObjectId,
    address fromEphemeralOwner,
    address toEphemeralOwner,
    InventoryItemParams[] memory items
  ) external;
}

interface _proxyTransferToInventory_uint256_uint256_InventoryItemParamsArray {
  function proxyTransferToInventory(
    uint256 smartObjectId,
    uint256 toObjectId,
    InventoryItemParams[] memory items
  ) external;
}

using StoreProxySystemLib for StoreProxySystemType global;
using StoreProxySystemLib for CallWrapper global;
using StoreProxySystemLib for RootCallWrapper global;
