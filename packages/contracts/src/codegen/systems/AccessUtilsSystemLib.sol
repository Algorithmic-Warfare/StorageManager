// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AccessUtilsSystem } from "../../systems/AccessUtilsSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AccessUtilsSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "sm_v0_2_0", name: "AccessUtilSystem" }))
AccessUtilsSystemType constant accessUtilsSystem = AccessUtilsSystemType.wrap(
  0x7379736d5f76305f325f3000000000004163636573735574696c53797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AccessUtilsSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AccessUtilsSystemLib {
  error AccessUtilsSystemLib_CallingFromRootSystem();

  function hasRoles(
    AccessUtilsSystemType self,
    bytes32[] memory roleIds,
    address account
  ) internal view returns (bool[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).hasRoles(roleIds, account);
  }

  function getOwnersOf(
    AccessUtilsSystemType self,
    uint256[] memory smartObjectIds
  ) internal view returns (address[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getOwnersOf(smartObjectIds);
  }

  function hasRoles(
    CallWrapper memory self,
    bytes32[] memory roleIds,
    address account
  ) internal view returns (bool[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_hasRoles_bytes32Array_address.hasRoles, (roleIds, account));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bool[]));
  }

  function getOwnersOf(
    CallWrapper memory self,
    uint256[] memory smartObjectIds
  ) internal view returns (address[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessUtilsSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getOwnersOf_uint256Array.getOwnersOf, (smartObjectIds));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (address[]));
  }

  function hasRoles(
    RootCallWrapper memory self,
    bytes32[] memory roleIds,
    address account
  ) internal view returns (bool[] memory) {
    bytes memory systemCall = abi.encodeCall(_hasRoles_bytes32Array_address.hasRoles, (roleIds, account));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (bool[]));
  }

  function getOwnersOf(
    RootCallWrapper memory self,
    uint256[] memory smartObjectIds
  ) internal view returns (address[] memory) {
    bytes memory systemCall = abi.encodeCall(_getOwnersOf_uint256Array.getOwnersOf, (smartObjectIds));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (address[]));
  }

  function callFrom(AccessUtilsSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AccessUtilsSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(AccessUtilsSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AccessUtilsSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AccessUtilsSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AccessUtilsSystemType) {
    return AccessUtilsSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AccessUtilsSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _hasRoles_bytes32Array_address {
  function hasRoles(bytes32[] memory roleIds, address account) external;
}

interface _getOwnersOf_uint256Array {
  function getOwnersOf(uint256[] memory smartObjectIds) external;
}

using AccessUtilsSystemLib for AccessUtilsSystemType global;
using AccessUtilsSystemLib for CallWrapper global;
using AccessUtilsSystemLib for RootCallWrapper global;
