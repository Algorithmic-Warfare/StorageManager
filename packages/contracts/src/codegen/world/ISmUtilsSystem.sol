// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { InventoryItemParams } from "@eveworld/world-v2/src/namespaces/evefrontier/systems/inventory/types.sol";
import { BucketMetadataData } from "../tables/BucketMetadata.sol";
import { BucketMetadataWithId } from "../../systems/StorageSystem/utils.sol";

/**
 * @title ISmUtilsSystem
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
 */
interface ISmUtilsSystem {
  function sm_v0_2_0__deriveBucketId(uint256 smartObjectId, string memory bucketName) external pure returns (bytes32);

  function sm_v0_2_0__getPrimaryInventoryOwnerItems(
    uint256 smartObjectId,
    address owner
  ) external view returns (InventoryItemParams[] memory);

  function sm_v0_2_0__getEphemeralInventoryItems(
    uint256 smartObjectId,
    address owner
  ) external view returns (InventoryItemParams[] memory);

  function sm_v0_2_0__getBucketInventoryItems(
    uint256 smartObjectId,
    bytes32 bucketId
  ) external view returns (InventoryItemParams[] memory);

  function sm_v0_2_0__getBucketsMetadata(
    uint256 smartObjectId,
    bytes32[] memory bucketIds
  ) external view returns (BucketMetadataData[] memory);

  function sm_v0_2_0__getBatchCanDeposit(
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) external returns (bool[] memory);

  function sm_v0_2_0__getBatchCanWithdraw(
    uint256 smartObjectId,
    bytes32[] memory bucketIds,
    address sender
  ) external returns (bool[] memory);

  function sm_v0_2_0__getOwnerBalance(uint256 smartObjectId, uint256 itemId) external view returns (uint256);

  function sm_v0_2_0__getBucketsByOwnerAtSSU(
    uint256 smartObjectId,
    address owner
  ) external view returns (bytes32[] memory);

  function sm_v0_2_0__getBucketMetadata(
    uint256 smartObjectId,
    bytes32 bucketId
  ) external view returns (BucketMetadataWithId memory);

  function sm_v0_2_0__getBucketMetadataChain(
    uint256 smartObjectId,
    bytes32 bucketId
  ) external view returns (BucketMetadataWithId[] memory);

  function sm_v0_2_0__getBucketMetadataChainByName(
    uint256 smartObjectId,
    string memory bucketName
  ) external view returns (BucketMetadataWithId[] memory);

  function sm_v0_2_0__getItemTypeIds(uint256[] calldata itemIds) external view returns (uint256[] memory);
}
